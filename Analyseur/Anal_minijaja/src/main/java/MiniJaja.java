/* Generated By:JJTree&JavaCC: Do not edit this line. MiniJaja.java */
        import java.io.*;

public class MiniJaja/*@bgen(jjtree)*/implements MiniJajaTreeConstants, MiniJajaConstants {/*@bgen(jjtree)*/
  protected JJTMiniJajaState jjtree = new JJTMiniJajaState();

	public JJTMiniJajaState getJJTree() {
		return jjtree;
	}
	
  // Regles syntaxicales
  final public void classe() throws ParseException {
                         /*@bgen(jjtree) classe */
  ASTclasse jjtn000 = new ASTclasse(JJTCLASSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      ident();
      jj_consume_token(LACCOL);
      decls();
      methmain();
      jj_consume_token(RACCOL);
      jj_consume_token(0);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ident() throws ParseException {
                      /*@bgen(jjtree) ident */
  ASTident jjtn000 = new ASTident(JJTIDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.setValeur(token.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void decls() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case FINAL:
    case INT:
    case VOID:
      decl();
      jj_consume_token(POINTVIRG);
                             ASTdecls jjtn001 = new ASTdecls(JJTDECLS);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
        decls();
      } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte001;}
                             }
                             if (jjte001 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte001;}
                             }
                             {if (true) throw (Error)jjte001;}
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
      }
      break;
    default:
      jj_la1[0] = jj_gen;
            ASTvnil jjtn002 = new ASTvnil(JJTVNIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;

      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
    }
  }

  final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      type();
      ident();
                                 ASTcst jjtn001 = new ASTcst(JJTCST);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
      try {
        vexp();
      } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
      } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  3);
                                 }
      }
      break;
    case BOOLEAN:
    case INT:
    case VOID:
      typemeth();
      ident();
      declbis();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void declbis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCROCH:
      jj_consume_token(LCROCH);
      exp();
                         ASTtableau jjtn001 = new ASTtableau(JJTTABLEAU);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RCROCH);
      } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  3);
                         }
      }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      entetes();
      jj_consume_token(RPAREN);
      jj_consume_token(LACCOL);
      vars();
      instrs();
                                                                 ASTmethode jjtn002 = new ASTmethode(JJTMETHODE);
                                                                 boolean jjtc002 = true;
                                                                 jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(RACCOL);
      } finally {
                                                                 if (jjtc002) {
                                                                   jjtree.closeNodeScope(jjtn002,  5);
                                                                 }
      }
      break;
    default:
      jj_la1[2] = jj_gen;
            ASTvar jjtn003 = new ASTvar(JJTVAR);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
      try {
        vexp();
      } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte003;}
            }
            if (jjte003 instanceof ParseException) {
              {if (true) throw (ParseException)jjte003;}
            }
            {if (true) throw (Error)jjte003;}
      } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  3);
            }
      }
    }
  }

  final public void vars() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case FINAL:
    case INT:
    case VOID:
      var();
      jj_consume_token(POINTVIRG);
                            ASTvars jjtn001 = new ASTvars(JJTVARS);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
        vars();
      } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
      }
      break;
    default:
      jj_la1[3] = jj_gen;
            ASTvnil jjtn002 = new ASTvnil(JJTVNIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;

      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
    }
  }

  final public void var() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      type();
      ident();
                                 ASTcst jjtn001 = new ASTcst(JJTCST);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
      try {
        vexp();
      } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
      } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  3);
                                 }
      }
      break;
    case BOOLEAN:
    case INT:
    case VOID:
      typemeth();
      ident();
      varbis();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void varbis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCROCH:
      jj_consume_token(LCROCH);
      exp();
                         ASTtableau jjtn001 = new ASTtableau(JJTTABLEAU);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RCROCH);
      } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  3);
                         }
      }
      break;
    default:
      jj_la1[5] = jj_gen;
             ASTvar jjtn002 = new ASTvar(JJTVAR);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
      try {
        vexp();
      } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte002;}
             }
             if (jjte002 instanceof ParseException) {
               {if (true) throw (ParseException)jjte002;}
             }
             {if (true) throw (Error)jjte002;}
      } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  3);
             }
      }
    }
  }

  final public void vexp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      exp();
      break;
    default:
      jj_la1[6] = jj_gen;
            ASTomega jjtn001 = new ASTomega(JJTOMEGA);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;

      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
    }
  }

  final public void methmain() throws ParseException {
                            /*@bgen(jjtree) #main( 2) */
  ASTmain jjtn000 = new ASTmain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      jj_consume_token(LACCOL);
      vars();
      instrs();
      jj_consume_token(RACCOL);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
          }
    }
  }

  final public void entetes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
      entete();
                   ASTentetes jjtn001 = new ASTentetes(JJTENTETES);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
        entetes2();
      } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
      }
      break;
    default:
      jj_la1[7] = jj_gen;
            ASTenil jjtn002 = new ASTenil(JJTENIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;

      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
    }
  }

  final public void entetes2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRG:
      jj_consume_token(VIRG);
      entete();
                          ASTentetes jjtn001 = new ASTentetes(JJTENTETES);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
        entetes2();
      } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
      }
      break;
    default:
      jj_la1[8] = jj_gen;
            ASTenil jjtn002 = new ASTenil(JJTENIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;

      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
    }
  }

  final public void entete() throws ParseException {
    type();
                 ASTentete jjtn001 = new ASTentete(JJTENTETE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
    try {
      ident();
    } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
    } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
    }
  }

  final public void instrs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case RETURN:
    case WHILE:
    case IDENTIFIER:
      instr();
      jj_consume_token(POINTVIRG);
                              ASTinstrs jjtn001 = new ASTinstrs(JJTINSTRS);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
      try {
        instrs();
      } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
      } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
            ASTinil jjtn002 = new ASTinil(JJTINIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;

      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
    }
  }

  final public void instr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      jj_consume_token(RETURN);
                   ASTretour jjtn001 = new ASTretour(JJTRETOUR);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
        exp();
      } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
      }
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      exp();
      jj_consume_token(RPAREN);
      jj_consume_token(LACCOL);
      instrs();
                                                              ASTtantque jjtn002 = new ASTtantque(JJTTANTQUE);
                                                              boolean jjtc002 = true;
                                                              jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(RACCOL);
      } finally {
                                                              if (jjtc002) {
                                                                jjtree.closeNodeScope(jjtn002,  2);
                                                              }
      }
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      exp();
      jj_consume_token(RPAREN);
      jj_consume_token(LACCOL);
      instrs();
      jj_consume_token(RACCOL);
                                                                    ASTsi jjtn003 = new ASTsi(JJTSI);
                                                                    boolean jjtc003 = true;
                                                                    jjtree.openNodeScope(jjtn003);
      try {
        elseNode();
      } catch (Throwable jjte003) {
                                                                    if (jjtc003) {
                                                                      jjtree.clearNodeScope(jjtn003);
                                                                      jjtc003 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte003 instanceof RuntimeException) {
                                                                      {if (true) throw (RuntimeException)jjte003;}
                                                                    }
                                                                    if (jjte003 instanceof ParseException) {
                                                                      {if (true) throw (ParseException)jjte003;}
                                                                    }
                                                                    {if (true) throw (Error)jjte003;}
      } finally {
                                                                    if (jjtc003) {
                                                                      jjtree.closeNodeScope(jjtn003,  3);
                                                                    }
      }
      break;
    case IDENTIFIER:
      ident();
      instrbis();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void elseNode() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(LACCOL);
      instrs();
      jj_consume_token(RACCOL);
      break;
    default:
      jj_la1[11] = jj_gen;
            ASTinil jjtn001 = new ASTinil(JJTINIL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;

      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
    }
  }

  final public void instrbis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCROCH:
    case ASSIGN:
    case INCR:
    case PLUSASSIGN:
      identbis();
      instrbisbis();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      listexp();
                               ASTappelI jjtn001 = new ASTappelI(JJTAPPELI);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RPAREN);
      } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void instrbisbis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
                   ASTaffectation jjtn001 = new ASTaffectation(JJTAFFECTATION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
        exp();
      } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
      }
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
                         ASTsomme jjtn002 = new ASTsomme(JJTSOMME);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
      try {
        exp();
      } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte002;}
                         }
                         if (jjte002 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte002;}
                         }
                         {if (true) throw (Error)jjte002;}
      } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                         }
      }
      break;
    case INCR:
            ASTincrement jjtn003 = new ASTincrement(JJTINCREMENT);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(INCR);
      } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  1);
            }
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void identbis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCROCH:
      jj_consume_token(LCROCH);
      exp();
                           ASTtab jjtn001 = new ASTtab(JJTTAB);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RCROCH);
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void listexp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case LPAREN:
    case IDENTIFIER:
    case NOMBRE:
    case BANG:
    case MINUS:
      exp();
                ASTlistexp jjtn001 = new ASTlistexp(JJTLISTEXP);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        listexpbis();
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
            ASTexnil jjtn002 = new ASTexnil(JJTEXNIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;

      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
    }
  }

  final public void listexpbis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRG:
      jj_consume_token(VIRG);
      exp();
                       ASTlistexp jjtn001 = new ASTlistexp(JJTLISTEXP);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
        listexpbis();
      } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
      }
      break;
    default:
      jj_la1[16] = jj_gen;
            ASTexnil jjtn002 = new ASTexnil(JJTEXNIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;

      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
    }
  }

  final public void exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      jj_consume_token(BANG);
                 ASTnon jjtn001 = new ASTnon(JJTNON);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
      try {
        exp1();
      } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
      }
      break;
    case MINUS:
      jj_consume_token(MINUS);
                    ASTneg jjtn002 = new ASTneg(JJTNEG);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
        exp1();
      } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
      } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
      }
      break;
    case FALSE:
    case TRUE:
    case LPAREN:
    case IDENTIFIER:
    case NOMBRE:
      exp1();
      expbis();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void expbis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        exp1();
                         ASTet jjtn001 = new ASTet(JJTET);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
        try {
          expbis();
        } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
        } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
        }
        break;
      case OR:
        jj_consume_token(OR);
        exp1();
                        ASTou jjtn002 = new ASTou(JJTOU);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
        try {
          expbis();
        } catch (Throwable jjte002) {
                        if (jjtc002) {
                          jjtree.clearNodeScope(jjtn002);
                          jjtc002 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte002;}
                        }
                        if (jjte002 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte002;}
                        }
                        {if (true) throw (Error)jjte002;}
        } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002,  2);
                        }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void exp1() throws ParseException {
    exp2();
    exp1bis();
  }

  final public void exp1bis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case LT:
    case GT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
                 ASTegal jjtn001 = new ASTegal(JJTEGAL);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
        try {
          exp2();
        } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
        }
        break;
      case LT:
        jj_consume_token(LT);
                 ASTinf jjtn002 = new ASTinf(JJTINF);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
        try {
          exp2();
        } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte002;}
                 }
                 if (jjte002 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte002;}
                 }
                 {if (true) throw (Error)jjte002;}
        } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  2);
                 }
        }
        break;
      case GT:
        jj_consume_token(GT);
                 ASTsup jjtn003 = new ASTsup(JJTSUP);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
        try {
          exp2();
        } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte003;}
                 }
                 if (jjte003 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte003;}
                 }
                 {if (true) throw (Error)jjte003;}
        } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003,  2);
                 }
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  final public void exp2() throws ParseException {
    terme();
    exp2bis();
  }

  final public void exp2bis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                   ASTplus jjtn001 = new ASTplus(JJTPLUS);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
        try {
          exp2();
        } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
        } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
                    ASTmoins jjtn002 = new ASTmoins(JJTMOINS);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
        try {
          exp2();
        } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
        } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void terme() throws ParseException {
    fact();
    termebis();
  }

  final public void termebis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case SLASH:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        fact();
                          ASTmult jjtn001 = new ASTmult(JJTMULT);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
          termebis();
        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
        }
        break;
      case SLASH:
        jj_consume_token(SLASH);
        fact();
                           ASTdiv jjtn002 = new ASTdiv(JJTDIV);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
        try {
          termebis();
        } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte002;}
                           }
                           if (jjte002 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte002;}
                           }
                           {if (true) throw (Error)jjte002;}
        } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  final public void fact() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
          ASTvrai jjtn001 = new ASTvrai(JJTVRAI);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TRUE);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case FALSE:
            ASTfaux jjtn002 = new ASTfaux(JJTFAUX);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(FALSE);
      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      exp();
      jj_consume_token(RPAREN);
      break;
    case IDENTIFIER:
      ident();
      factbis();
      break;
    case NOMBRE:
      nbre();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void factbis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
          ASTappelE jjtn001 = new ASTappelE(JJTAPPELE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(LPAREN);
        listexp();
        jj_consume_token(RPAREN);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      identbis();
    }
  }

  final public void nbre() throws ParseException {
                     /*@bgen(jjtree) nbre */
                     ASTnbre jjtn000 = new ASTnbre(JJTNBRE);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);int x;
    try {
      jj_consume_token(NOMBRE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                try { x = Integer.parseInt(token.image);
                } catch (NumberFormatException ee) {
                        System.err.println("Error: " + token.image + " is not a number.");
                        x = 0;
                }
                jjtn000.setValeur(x);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void typemeth() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
          ASTrien jjtn001 = new ASTrien(JJTRIEN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(VOID);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case BOOLEAN:
    case INT:
      type();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
          ASTentier jjtn001 = new ASTentier(JJTENTIER);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(INT);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case BOOLEAN:
            ASTbooleen jjtn002 = new ASTbooleen(JJTBOOLEEN);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(BOOLEAN);
      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public MiniJajaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2c080,0x2c080,0x880000,0x2c080,0x2c080,0x800000,0x40000000,0x8080,0x4000000,0x8050800,0x8050800,0x1000,0x40880000,0x40000000,0x800000,0x98080600,0x4000000,0x98080600,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x18080600,0x80000,0x28080,0x8080,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x8,0x0,0x8,0x180,0x180,0x240,0x240,0xc,0xc,0x30,0x30,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public MiniJaja(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJaja(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJajaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniJaja(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJajaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniJaja(MiniJajaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniJajaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                      }
