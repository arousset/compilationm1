/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jajacode.jj */
/*@egen*//*
	Parseur jajacode
	ROUSSET Alban & KAWCZAK Clement
*/

options {
             
               
                                               
}

PARSER_BEGIN(JajaCode)

	public class JajaCode/*@bgen(jjtree)*/implements JajaCodeTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTJajaCodeState jjtree = new JJTJajaCodeState();

/*@egen*/
	  public static void main (String arg[]) throws ParseException {
      JajaCode jjc = new JajaCode(System.in) ;
        jjc.Classe() ;
        
        Node racine = jjc.jjtree.rootNode();
    	((SimpleNode)racine).dump("-->");
      }
	}
PARSER_END(JajaCode)

/** ----------------- Regles lexicales ------------------------ */
SKIP : { " "   |   "\r"   |  "\n"  |  "\t" }  
TOKEN : {   
     < ADD: "add" >
  |  < AINC: "ainc" >
  |  < ALOAD: "aload" >
  |  < AND: "and" >
  |  < ASTORE: "astore" >
  |  < BOOLEEN : "booleen">
  |  < CST : "cst">
  |  < CMP: "cmp" >
  |  < DIV: "div" >
  |  < ENTIER : "entier">
  |  < FALSE: "false" >
  |  < GOTO: "goto" >
  |  < IF: "if" >
  |  < INC: "inc" >
  |  < INF: "inf" >
  |  < INIT: "init" >
  |  < INVOKE: "invoke" >
  |  < JCSTOP: "jcstop" >
  |  < LOAD: "load" >
  |  < METH : "meth">
  |  < MUL: "mul" >
  |  < NEG: "neg" >
  |  < NEWARRAY: "newarray" >
  |  < NEW: "new" >
  |  < NOP: "nop" >
  |  < NOT: "not" >
  |  < OR: "or" >
  |  < POP: "pop" >
  |  < PUSH: "push" >
  |  < RETURN: "return" >
  |  < STORE: "store" >
  |  < SUB: "sub" >
  |  < SUP: "sup" >
  |  < SWAP: "swap" >
  |  < TRUE: "true" >
  |  < POINTVIRGULE: ";" >
  |  < PAROUV: "(" >
  |  < PARFERM: ")" >
  |  < VIRGULE: "," >
  |  < VAR : "var">
  |  < VOID : "void">
  |  < IDENTIFIER: (["a"-"z","A"-"Z"]) (["a"-"z","A"-"Z","0"-"9","_"])* >
  |  < NOMBRE: (["0"-"9"]) (["0"-"9"])* >
}

void Classe()       : {} {
     Adresse() Instrs() <POINTVIRGULE>/*@bgen(jjtree) #JajaCode( 3) */
                                       {
                                         ASTJajaCode jjtn001 = new ASTJajaCode(JJTJAJACODE);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ Classe()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  3);
                                         }
                                       }
/*@egen*/              |/*@bgen(jjtree) JCNil */
                                                               {
                                                                 ASTJCNil jjtn002 = new ASTJCNil(JJTJCNIL);
                                                                 boolean jjtc002 = true;
                                                                 jjtree.openNodeScope(jjtn002);
                                                               }
                                                               try {
/*@egen*/ <EOF>/*@bgen(jjtree)*/
                                                               } finally {
                                                                 if (jjtc002) {
                                                                   jjtree.closeNodeScope(jjtn002, true);
                                                                 }
                                                               }
/*@egen*/       
}

void Instrs()       : {} {/*@bgen(jjtree) Init */
       {
         ASTInit jjtn001 = new ASTInit(JJTINIT);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
       }
       try {
/*@egen*/
       <INIT>/*@bgen(jjtree)*/
       } finally {
         if (jjtc001) {
           jjtree.closeNodeScope(jjtn001, true);
         }
       }
/*@egen*/      
     |/*@bgen(jjtree) Swap */
       {
         ASTSwap jjtn002 = new ASTSwap(JJTSWAP);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
       }
       try {
/*@egen*/ <SWAP>/*@bgen(jjtree)*/
       } finally {
         if (jjtc002) {
           jjtree.closeNodeScope(jjtn002, true);
         }
       }
/*@egen*/      
     | <NEW> <PAROUV> Ident() <VIRGULE> Type() <VIRGULE> Sorte() <VIRGULE> Adresse()/*@bgen(jjtree) #New( 4) */
                                                                                     {
                                                                                       ASTNew jjtn003 = new ASTNew(JJTNEW);
                                                                                       boolean jjtc003 = true;
                                                                                       jjtree.openNodeScope(jjtn003);
                                                                                     }
                                                                                     try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                                                                                     } finally {
                                                                                       if (jjtc003) {
                                                                                         jjtree.closeNodeScope(jjtn003,  4);
                                                                                       }
                                                                                     }
/*@egen*/        
     | <NEWARRAY> <PAROUV> Ident() <VIRGULE> Type()/*@bgen(jjtree) #NewArray( 2) */
                                                    {
                                                      ASTNewArray jjtn004 = new ASTNewArray(JJTNEWARRAY);
                                                      boolean jjtc004 = true;
                                                      jjtree.openNodeScope(jjtn004);
                                                    }
                                                    try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                                                    } finally {
                                                      if (jjtc004) {
                                                        jjtree.closeNodeScope(jjtn004,  2);
                                                      }
                                                    }
/*@egen*/             
     | <INVOKE> <PAROUV> Ident()/*@bgen(jjtree) #Invoke( 1) */
                                 {
                                   ASTInvoke jjtn005 = new ASTInvoke(JJTINVOKE);
                                   boolean jjtc005 = true;
                                   jjtree.openNodeScope(jjtn005);
                                 }
                                 try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc005) {
                                     jjtree.closeNodeScope(jjtn005,  1);
                                   }
                                 }
/*@egen*/           
     |/*@bgen(jjtree) Return */
       {
         ASTReturn jjtn006 = new ASTReturn(JJTRETURN);
         boolean jjtc006 = true;
         jjtree.openNodeScope(jjtn006);
       }
       try {
/*@egen*/ <RETURN>/*@bgen(jjtree)*/
       } finally {
         if (jjtc006) {
           jjtree.closeNodeScope(jjtn006, true);
         }
       }
/*@egen*/        
     | <PUSH> <PAROUV> Valeur()/*@bgen(jjtree) #Push( 1) */
                                {
                                  ASTPush jjtn007 = new ASTPush(JJTPUSH);
                                  boolean jjtc007 = true;
                                  jjtree.openNodeScope(jjtn007);
                                }
                                try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc007) {
                                    jjtree.closeNodeScope(jjtn007,  1);
                                  }
                                }
/*@egen*/         
     |/*@bgen(jjtree) Pop */
       {
         ASTPop jjtn008 = new ASTPop(JJTPOP);
         boolean jjtc008 = true;
         jjtree.openNodeScope(jjtn008);
       }
       try {
/*@egen*/ <POP>/*@bgen(jjtree)*/
       } finally {
         if (jjtc008) {
           jjtree.closeNodeScope(jjtn008, true);
         }
       }
/*@egen*/     
     | <LOAD> <PAROUV> Ident()/*@bgen(jjtree) #Load( 1) */
                               {
                                 ASTLoad jjtn009 = new ASTLoad(JJTLOAD);
                                 boolean jjtc009 = true;
                                 jjtree.openNodeScope(jjtn009);
                               }
                               try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc009) {
                                   jjtree.closeNodeScope(jjtn009,  1);
                                 }
                               }
/*@egen*/         
     | <ALOAD> <PAROUV> Ident()/*@bgen(jjtree) #ALoad( 1) */
                                {
                                  ASTALoad jjtn010 = new ASTALoad(JJTALOAD);
                                  boolean jjtc010 = true;
                                  jjtree.openNodeScope(jjtn010);
                                }
                                try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc010) {
                                    jjtree.closeNodeScope(jjtn010,  1);
                                  }
                                }
/*@egen*/          
     | <STORE> <PAROUV> Ident()/*@bgen(jjtree) #Store( 1) */
                                {
                                  ASTStore jjtn011 = new ASTStore(JJTSTORE);
                                  boolean jjtc011 = true;
                                  jjtree.openNodeScope(jjtn011);
                                }
                                try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc011) {
                                    jjtree.closeNodeScope(jjtn011,  1);
                                  }
                                }
/*@egen*/          
     | <ASTORE> <PAROUV> Ident()/*@bgen(jjtree) #AStore( 1) */
                                 {
                                   ASTAStore jjtn012 = new ASTAStore(JJTASTORE);
                                   boolean jjtc012 = true;
                                   jjtree.openNodeScope(jjtn012);
                                 }
                                 try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc012) {
                                     jjtree.closeNodeScope(jjtn012,  1);
                                   }
                                 }
/*@egen*/           
     | <IF> <PAROUV> Adresse()/*@bgen(jjtree) #If( 1) */
                               {
                                 ASTIf jjtn013 = new ASTIf(JJTIF);
                                 boolean jjtc013 = true;
                                 jjtree.openNodeScope(jjtn013);
                               }
                               try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc013) {
                                   jjtree.closeNodeScope(jjtn013,  1);
                                 }
                               }
/*@egen*/       
     | <GOTO> <PAROUV> Adresse()/*@bgen(jjtree) #Goto( 1) */
                                 {
                                   ASTGoto jjtn014 = new ASTGoto(JJTGOTO);
                                   boolean jjtc014 = true;
                                   jjtree.openNodeScope(jjtn014);
                                 }
                                 try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc014) {
                                     jjtree.closeNodeScope(jjtn014,  1);
                                   }
                                 }
/*@egen*/         
     | <INC> <PAROUV> Ident()/*@bgen(jjtree) #Inc( 1) */
                              {
                                ASTInc jjtn015 = new ASTInc(JJTINC);
                                boolean jjtc015 = true;
                                jjtree.openNodeScope(jjtn015);
                              }
                              try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc015) {
                                  jjtree.closeNodeScope(jjtn015,  1);
                                }
                              }
/*@egen*/        
     | <AINC> <PAROUV> Ident()/*@bgen(jjtree) #AInc( 1) */
                               {
                                 ASTAInc jjtn016 = new ASTAInc(JJTAINC);
                                 boolean jjtc016 = true;
                                 jjtree.openNodeScope(jjtn016);
                               }
                               try {
/*@egen*/ <PARFERM>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc016) {
                                   jjtree.closeNodeScope(jjtn016,  1);
                                 }
                               }
/*@egen*/         
     |/*@bgen(jjtree) Nop */
       {
         ASTNop jjtn017 = new ASTNop(JJTNOP);
         boolean jjtc017 = true;
         jjtree.openNodeScope(jjtn017);
       }
       try {
/*@egen*/ <NOP>/*@bgen(jjtree)*/
       } finally {
         if (jjtc017) {
           jjtree.closeNodeScope(jjtn017, true);
         }
       }
/*@egen*/     
     |/*@bgen(jjtree) JCStop */
       {
         ASTJCStop jjtn018 = new ASTJCStop(JJTJCSTOP);
         boolean jjtc018 = true;
         jjtree.openNodeScope(jjtn018);
       }
       try {
/*@egen*/ <JCSTOP>/*@bgen(jjtree)*/
       } finally {
         if (jjtc018) {
           jjtree.closeNodeScope(jjtn018, true);
         }
       }
/*@egen*/        
     | Oper()
}

void Ident()          : {/*@bgen(jjtree) JCIdent */
  ASTJCIdent jjtn000 = new ASTJCIdent(JJTJCIDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) JCIdent */
        try {
/*@egen*/
	<IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.setValeur(token.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Type()         : {/*@bgen(jjtree) JCType */
  ASTJCType jjtn000 = new ASTJCType(JJTJCTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) JCType */
        try {
/*@egen*/
	( <ENTIER> | <BOOLEEN> | <VOID> )/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/ { jjtn000.setValeur(token.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Sorte()          : {/*@bgen(jjtree) JCSorte */
  ASTJCSorte jjtn000 = new ASTJCSorte(JJTJCSORTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) JCSorte */
        try {
/*@egen*/
	( <VAR> | <METH> | <CST> )/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ { jjtn000.setValeur(token.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Valeur()       : {} {/*@bgen(jjtree) JCVrai */
          {
            ASTJCVrai jjtn001 = new ASTJCVrai(JJTJCVRAI);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/
	  <TRUE>/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/        
	|/*@bgen(jjtree) JCFaux */
          {
            ASTJCFaux jjtn002 = new ASTJCFaux(JJTJCFAUX);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/        
	| Nombre()
	|/*@bgen(jjtree) JCNil */
          {
            ASTJCNil jjtn003 = new ASTJCNil(JJTJCNIL);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn003, true);
            jjtc003 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
          }
/*@egen*/       
}

void Adresse()       : {} {
	Nombre()
}

void Oper()       : {} {
	Oper2() | Oper1()
}

void Oper1()       : {} {/*@bgen(jjtree) Neg */
          {
            ASTNeg jjtn001 = new ASTNeg(JJTNEG);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/
	  <NEG>/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/      
	|/*@bgen(jjtree) Not */
          {
            ASTNot jjtn002 = new ASTNot(JJTNOT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ <NOT>/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/     
}

void Oper2()       : {} {/*@bgen(jjtree) Add */
          {
            ASTAdd jjtn001 = new ASTAdd(JJTADD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/
	  <ADD>/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/     
	|/*@bgen(jjtree) Sub */
          {
            ASTSub jjtn002 = new ASTSub(JJTSUB);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ <SUB>/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/     
	|/*@bgen(jjtree) Mul */
          {
            ASTMul jjtn003 = new ASTMul(JJTMUL);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ <MUL>/*@bgen(jjtree)*/
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
          }
/*@egen*/     
	|/*@bgen(jjtree) Div */
          {
            ASTDiv jjtn004 = new ASTDiv(JJTDIV);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
          }
          try {
/*@egen*/ <DIV>/*@bgen(jjtree)*/
          } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
            }
          }
/*@egen*/     
	|/*@bgen(jjtree) Cmp */
          {
            ASTCmp jjtn005 = new ASTCmp(JJTCMP);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
          }
          try {
/*@egen*/ <CMP>/*@bgen(jjtree)*/
          } finally {
            if (jjtc005) {
              jjtree.closeNodeScope(jjtn005, true);
            }
          }
/*@egen*/     
	|/*@bgen(jjtree) Sup */
          {
            ASTSup jjtn006 = new ASTSup(JJTSUP);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
          }
          try {
/*@egen*/ <SUP>/*@bgen(jjtree)*/
          } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
          }
/*@egen*/     
	|/*@bgen(jjtree) Inf */
          {
            ASTInf jjtn007 = new ASTInf(JJTINF);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
          }
          try {
/*@egen*/ <INF>/*@bgen(jjtree)*/
          } finally {
            if (jjtc007) {
              jjtree.closeNodeScope(jjtn007, true);
            }
          }
/*@egen*/     
	|/*@bgen(jjtree) Or */
          {
            ASTOr jjtn008 = new ASTOr(JJTOR);
            boolean jjtc008 = true;
            jjtree.openNodeScope(jjtn008);
          }
          try {
/*@egen*/ <OR>/*@bgen(jjtree)*/
          } finally {
            if (jjtc008) {
              jjtree.closeNodeScope(jjtn008, true);
            }
          }
/*@egen*/    
	|/*@bgen(jjtree) And */
          {
            ASTAnd jjtn009 = new ASTAnd(JJTAND);
            boolean jjtc009 = true;
            jjtree.openNodeScope(jjtn009);
          }
          try {
/*@egen*/ <AND>/*@bgen(jjtree)*/
          } finally {
            if (jjtc009) {
              jjtree.closeNodeScope(jjtn009, true);
            }
          }
/*@egen*/     
}

void Nombre()           : {/*@bgen(jjtree) #JCNbre(true) */
                            ASTJCNbre jjtn000 = new ASTJCNbre(JJTJCNBRE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ int x = 0; } {/*@bgen(jjtree) #JCNbre(true) */
    try {
/*@egen*/
    <NOMBRE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {  
    	try { 
    		x = Integer.parseInt(token.image);
        } catch (NumberFormatException ee) {
        	System.err.println("Error: " + token.image + " is not a number.");
        	x = 0;
        }
        jjtn000.setValeur(x);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}
