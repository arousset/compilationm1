/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. minijaja.jj */
/*@egen*//*
	Parseur minijaja
	ROUSSET Alban & KAWCZAK Clement
*/

options{
	           
	             
	                                             
}

PARSER_BEGIN(MiniJaja)
	import java.io.*;
	
public class MiniJaja/*@bgen(jjtree)*/implements MiniJajaTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTMiniJajaState jjtree = new JJTMiniJajaState();

/*@egen*/

	public static void main (String arg[]) throws Exception {
		MiniJaja mjj = new MiniJaja(new FileReader(new File("exemple.txt")));
    	mjj.classe();
    	
    	Node racine = mjj.jjtree.rootNode();
    	((SimpleNode)racine).dump("-->");
  	}
}	
PARSER_END(MiniJaja)

// D\u00e9finition des \u00e9lements \u00e0 sauter

SKIP:{
  " "
  | "\t"
  | "\n"
  | "\r"
  | <"//"(~["\n", "\r"])*("\n" // Commentaires simples
  | "\r"
  | "\r\n")>
  | <"/*"(~["*"])*"*"(~["/"](~["*"])*"*")*"/"> // Commentaires complexes
}

// D\u00e9finition des Tokens

TOKEN:{
	<BOOLEAN:"boolean">
	| <CLASS:"class">
	| <FALSE:"false">
	| <TRUE:"true">
	| <IF:"if">
	| <ELSE:"else">
	| <MAIN:"main">
	| <FINAL:"final">
	| <INT:"int">
	| <RETURN:"return">
	| <VOID:"void">
	| <WHILE:"while">
}

TOKEN:
{
	<LPAREN:"(">
	| <RPAREN:")">
	| <LACCOL:"{">
	| <RACCOL:"}">
	| <LCROCH:"[">
	| <RCROCH:"]">
	| <POINTVIRG:";">
	| <VIRG:",">
}

TOKEN:
{
	< IDENTIFIER: (["a"-"z","A"-"Z"]) (["a"-"z","A"-"Z","0"-"9","_"])* >
 	| < NOMBRE: (["0"-"9"]) (["0"-"9"])* >
}

TOKEN:
{
	<EQ:"==">
	| <ASSIGN:"=">
	| <BANG:"!">
	| <INCR:"++">
	| <PLUSASSIGN:"+=">
	| <PLUS:"+">
	| <MINUS:"-">
	| <STAR:"*">
	| <SLASH:"/">
	| <LT:"<">
	| <OR:"||">
	| <AND:"&&">
	| <GT:">">
}

// Regles syntaxicales

void classe()         : {/*@bgen(jjtree) classe */
  ASTclasse jjtn000 = new ASTclasse(JJTCLASSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) classe */
        try {
/*@egen*/
	<CLASS> ident() <LACCOL> decls() methmain() <RACCOL> <EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ident()       : {/*@bgen(jjtree) ident */
  ASTident jjtn000 = new ASTident(JJTIDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ident */
        try {
/*@egen*/
	<IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.setValeur(token.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void decls()       : {} {
	decl() <POINTVIRG>/*@bgen(jjtree) #decls( 2) */
                           {
                             ASTdecls jjtn001 = new ASTdecls(JJTDECLS);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ decls()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
                           }
/*@egen*/           
	|/*@bgen(jjtree) vnil */
          {
            ASTvnil jjtn002 = new ASTvnil(JJTVNIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/      
}

void decl()       : {} {
	<FINAL> type() ident()/*@bgen(jjtree) #cst( 3) */
                               {
                                 ASTcst jjtn001 = new ASTcst(JJTCST);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ vexp()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  3);
                                 }
                               }
/*@egen*/        
	| typemeth() ident() declbis()
}

void declbis()       : {} {
	<LCROCH> exp()/*@bgen(jjtree) #tableau( 3) */
                       {
                         ASTtableau jjtn001 = new ASTtableau(JJTTABLEAU);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ <RCROCH>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  3);
                         }
                       }
/*@egen*/            
	| <LPAREN> entetes() <RPAREN> <LACCOL> vars() instrs()/*@bgen(jjtree) #methode( 5) */
                                                               {
                                                                 ASTmethode jjtn002 = new ASTmethode(JJTMETHODE);
                                                                 boolean jjtc002 = true;
                                                                 jjtree.openNodeScope(jjtn002);
                                                               }
                                                               try {
/*@egen*/ <RACCOL>/*@bgen(jjtree)*/
                                                               } finally {
                                                                 if (jjtc002) {
                                                                   jjtree.closeNodeScope(jjtn002,  5);
                                                                 }
                                                               }
/*@egen*/            
	|/*@bgen(jjtree) #var( 3) */
          {
            ASTvar jjtn003 = new ASTvar(JJTVAR);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ vexp()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  3);
            }
          }
/*@egen*/        
}

void vars()       : {} {
	var() <POINTVIRG>/*@bgen(jjtree) #vars( 2) */
                          {
                            ASTvars jjtn001 = new ASTvars(JJTVARS);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ vars()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
                          }
/*@egen*/         
	|/*@bgen(jjtree) vnil */
          {
            ASTvnil jjtn002 = new ASTvnil(JJTVNIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/      
}

void var()       : {} {
	<FINAL> type() ident()/*@bgen(jjtree) #cst( 3) */
                               {
                                 ASTcst jjtn001 = new ASTcst(JJTCST);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ vexp()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  3);
                                 }
                               }
/*@egen*/        
	| typemeth() ident() varbis()
}

void varbis()       : {} {
	<LCROCH> exp()/*@bgen(jjtree) #tableau( 3) */
                       {
                         ASTtableau jjtn001 = new ASTtableau(JJTTABLEAU);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ <RCROCH>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  3);
                         }
                       }
/*@egen*/            
	|/*@bgen(jjtree) #var( 3) */
           {
             ASTvar jjtn002 = new ASTvar(JJTVAR);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*/  vexp()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  3);
             }
           }
/*@egen*/         
}

void vexp()       : {} {
	<ASSIGN> exp()
	|/*@bgen(jjtree) omega */
          {
            ASTomega jjtn001 = new ASTomega(JJTOMEGA);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/       
}

void methmain()          : {/*@bgen(jjtree) #main( 2) */
  ASTmain jjtn000 = new ASTmain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) #main( 2) */
        try {
/*@egen*/
	<MAIN> <LACCOL> vars() instrs() <RACCOL>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
          }
        }
/*@egen*/
}

void entetes()       : {} {
	entete()/*@bgen(jjtree) #entetes( 2) */
                 {
                   ASTentetes jjtn001 = new ASTentetes(JJTENTETES);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ entetes2()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
                 }
/*@egen*/            
	|/*@bgen(jjtree) enil */
          {
            ASTenil jjtn002 = new ASTenil(JJTENIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/      
}

void entetes2()       : {} {
	<VIRG> entete()/*@bgen(jjtree) #entetes( 2) */
                        {
                          ASTentetes jjtn001 = new ASTentetes(JJTENTETES);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ entetes2()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
                        }
/*@egen*/            
	|/*@bgen(jjtree) enil */
          {
            ASTenil jjtn002 = new ASTenil(JJTENIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/      
}

void entete()       : {} {
	type()/*@bgen(jjtree) #entete( 2) */
               {
                 ASTentete jjtn001 = new ASTentete(JJTENTETE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ ident()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/           
}

void instrs()       : {} {
	instr() <POINTVIRG>/*@bgen(jjtree) #instrs( 2) */
                            {
                              ASTinstrs jjtn001 = new ASTinstrs(JJTINSTRS);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ instrs()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/           
	|/*@bgen(jjtree) inil */
          {
            ASTinil jjtn002 = new ASTinil(JJTINIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/      
}

void instr()       : {} {
	<RETURN>/*@bgen(jjtree) retour */
                 {
                   ASTretour jjtn001 = new ASTretour(JJTRETOUR);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ exp()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
                 }
/*@egen*/        
	| <WHILE> <LPAREN> exp() <RPAREN> <LACCOL> instrs()/*@bgen(jjtree) #tantque( 2) */
                                                            {
                                                              ASTtantque jjtn002 = new ASTtantque(JJTTANTQUE);
                                                              boolean jjtc002 = true;
                                                              jjtree.openNodeScope(jjtn002);
                                                            }
                                                            try {
/*@egen*/ <RACCOL>/*@bgen(jjtree)*/
                                                            } finally {
                                                              if (jjtc002) {
                                                                jjtree.closeNodeScope(jjtn002,  2);
                                                              }
                                                            }
/*@egen*/            
	| <IF> <LPAREN> exp() <RPAREN> <LACCOL> instrs() <RACCOL>/*@bgen(jjtree) #si( 3) */
                                                                  {
                                                                    ASTsi jjtn003 = new ASTsi(JJTSI);
                                                                    boolean jjtc003 = true;
                                                                    jjtree.openNodeScope(jjtn003);
                                                                  }
                                                                  try {
/*@egen*/ elseNode()/*@bgen(jjtree)*/
                                                                  } catch (Throwable jjte003) {
                                                                    if (jjtc003) {
                                                                      jjtree.clearNodeScope(jjtn003);
                                                                      jjtc003 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte003 instanceof RuntimeException) {
                                                                      throw (RuntimeException)jjte003;
                                                                    }
                                                                    if (jjte003 instanceof ParseException) {
                                                                      throw (ParseException)jjte003;
                                                                    }
                                                                    throw (Error)jjte003;
                                                                  } finally {
                                                                    if (jjtc003) {
                                                                      jjtree.closeNodeScope(jjtn003,  3);
                                                                    }
                                                                  }
/*@egen*/       
	| ident() instrbis()
}

void elseNode()       : {} {
	<ELSE> <LACCOL> instrs() <RACCOL>
	|/*@bgen(jjtree) inil */
          {
            ASTinil jjtn001 = new ASTinil(JJTINIL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/      
}

void instrbis()       : {} {
	identbis() instrbisbis() 
	| <LPAREN> listexp()/*@bgen(jjtree) #appelI( 2) */
                             {
                               ASTappelI jjtn001 = new ASTappelI(JJTAPPELI);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ <RPAREN>/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
                             }
/*@egen*/           
}

void instrbisbis()       : {}{
	<ASSIGN>/*@bgen(jjtree) #affectation( 2) */
                 {
                   ASTaffectation jjtn001 = new ASTaffectation(JJTAFFECTATION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ exp()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
                 }
/*@egen*/                
	| <PLUSASSIGN>/*@bgen(jjtree) #somme( 2) */
                       {
                         ASTsomme jjtn002 = new ASTsomme(JJTSOMME);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                       }
                       try {
/*@egen*/ exp()/*@bgen(jjtree)*/
                       } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           throw (RuntimeException)jjte002;
                         }
                         if (jjte002 instanceof ParseException) {
                           throw (ParseException)jjte002;
                         }
                         throw (Error)jjte002;
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                         }
                       }
/*@egen*/          
	|/*@bgen(jjtree) #increment( 1) */
          {
            ASTincrement jjtn003 = new ASTincrement(JJTINCREMENT);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ <INCR>/*@bgen(jjtree)*/
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  1);
            }
          }
/*@egen*/              
}

void identbis()       : {} {
	[ <LCROCH> exp()/*@bgen(jjtree) #tab( 2) */
                         {
                           ASTtab jjtn001 = new ASTtab(JJTTAB);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ <RCROCH>/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
                         }
/*@egen*/         ]
}

void listexp()       : {} {
	exp()/*@bgen(jjtree) #listexp( 2) */
              {
                ASTlistexp jjtn001 = new ASTlistexp(JJTLISTEXP);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ listexpbis()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/            
	|/*@bgen(jjtree) exnil */
          {
            ASTexnil jjtn002 = new ASTexnil(JJTEXNIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/       
}

void listexpbis()       : {} {
	<VIRG> exp()/*@bgen(jjtree) #listexp( 2) */
                     {
                       ASTlistexp jjtn001 = new ASTlistexp(JJTLISTEXP);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ listexpbis()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/            
	|/*@bgen(jjtree) exnil */
          {
            ASTexnil jjtn002 = new ASTexnil(JJTEXNIL);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/       
}

void exp()       : {} {
	<BANG>/*@bgen(jjtree) non */
               {
                 ASTnon jjtn001 = new ASTnon(JJTNON);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ exp1()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/     
	| <MINUS>/*@bgen(jjtree) neg */
                  {
                    ASTneg jjtn002 = new ASTneg(JJTNEG);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ exp1()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
                  }
/*@egen*/     
	| exp1() expbis()
}

void expbis()       : {} {

	[ <AND> exp1()/*@bgen(jjtree) #et( 2) */
                       {
                         ASTet jjtn001 = new ASTet(JJTET);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ expbis()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
                       }
/*@egen*/       
	| <OR> exp1()/*@bgen(jjtree) #ou( 2) */
                      {
                        ASTou jjtn002 = new ASTou(JJTOU);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                      }
                      try {
/*@egen*/ expbis()/*@bgen(jjtree)*/
                      } catch (Throwable jjte002) {
                        if (jjtc002) {
                          jjtree.clearNodeScope(jjtn002);
                          jjtc002 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                          throw (RuntimeException)jjte002;
                        }
                        if (jjte002 instanceof ParseException) {
                          throw (ParseException)jjte002;
                        }
                        throw (Error)jjte002;
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002,  2);
                        }
                      }
/*@egen*/        ]
}

void exp1()       : {} {
	exp2() exp1bis()
}

void exp1bis()       : {} {
	[ <EQ>/*@bgen(jjtree) #egal( 2) */
               {
                 ASTegal jjtn001 = new ASTegal(JJTEGAL);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ exp2()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/         
	| <LT>/*@bgen(jjtree) #inf( 2) */
               {
                 ASTinf jjtn002 = new ASTinf(JJTINF);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ exp2()/*@bgen(jjtree)*/
               } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   throw (RuntimeException)jjte002;
                 }
                 if (jjte002 instanceof ParseException) {
                   throw (ParseException)jjte002;
                 }
                 throw (Error)jjte002;
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  2);
                 }
               }
/*@egen*/        
	| <GT>/*@bgen(jjtree) #sup( 2) */
               {
                 ASTsup jjtn003 = new ASTsup(JJTSUP);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
               }
               try {
/*@egen*/ exp2()/*@bgen(jjtree)*/
               } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   throw (RuntimeException)jjte003;
                 }
                 if (jjte003 instanceof ParseException) {
                   throw (ParseException)jjte003;
                 }
                 throw (Error)jjte003;
               } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003,  2);
                 }
               }
/*@egen*/         ]
}

void exp2()       : {} {
	terme() exp2bis()
}

void exp2bis()       : {} {
	[ <PLUS>/*@bgen(jjtree) #plus( 2) */
                 {
                   ASTplus jjtn001 = new ASTplus(JJTPLUS);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ exp2()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
                 }
/*@egen*/         
	| <MINUS>/*@bgen(jjtree) #moins( 2) */
                  {
                    ASTmoins jjtn002 = new ASTmoins(JJTMOINS);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ exp2()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
                  }
/*@egen*/           ]
}

void terme()       : {} {
	fact() termebis()
}

void termebis()       : {} {
	[ <STAR> fact()/*@bgen(jjtree) #mult( 2) */
                        {
                          ASTmult jjtn001 = new ASTmult(JJTMULT);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ termebis()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
                        }
/*@egen*/         
	| <SLASH> fact()/*@bgen(jjtree) #div( 2) */
                         {
                           ASTdiv jjtn002 = new ASTdiv(JJTDIV);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*/ termebis()/*@bgen(jjtree)*/
                         } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             throw (RuntimeException)jjte002;
                           }
                           if (jjte002 instanceof ParseException) {
                             throw (ParseException)jjte002;
                           }
                           throw (Error)jjte002;
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
                         }
/*@egen*/         ]
}

void fact()       : {} {/*@bgen(jjtree) vrai */
        {
          ASTvrai jjtn001 = new ASTvrai(JJTVRAI);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	<TRUE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/      
	|/*@bgen(jjtree) faux */
          {
            ASTfaux jjtn002 = new ASTfaux(JJTFAUX);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/      
	| <LPAREN> exp() <RPAREN>
	| ident() factbis()
	| nbre()
}
void factbis()      :{}{/*@bgen(jjtree) #appelE( 2) */
        {
          ASTappelE jjtn001 = new ASTappelE(JJTAPPELE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	( <LPAREN> listexp() <RPAREN> )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/           
	| identbis()
}

void nbre()       : {/*@bgen(jjtree) nbre */
                     ASTnbre jjtn000 = new ASTnbre(JJTNBRE);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/int x;} {/*@bgen(jjtree) nbre */
        try {
/*@egen*/ 
	<NOMBRE>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {
		try { x = Integer.parseInt(token.image);
		} catch (NumberFormatException ee) {
			System.err.println("Error: " + token.image + " is not a number.");
			x = 0;
		}		
		jjtn000.setValeur(x);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void typemeth()       : {} {/*@bgen(jjtree) rien */
        {
          ASTrien jjtn001 = new ASTrien(JJTRIEN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	<VOID>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/      
	| type() 
}

void type()      :{}{/*@bgen(jjtree) entier */
        {
          ASTentier jjtn001 = new ASTentier(JJTENTIER);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	<INT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/        
	|/*@bgen(jjtree) booleen */
          {
            ASTbooleen jjtn002 = new ASTbooleen(JJTBOOLEEN);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ <BOOLEAN>/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/         
}
